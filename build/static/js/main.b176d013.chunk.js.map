{"version":3,"sources":["serviceWorker.js","Components/card.js","Components/cardlist.js","Components/robots.js","Components/searchbox.js","Components/scroll.js","Containers/app.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Card","_ref","name","image","email","react_default","a","createElement","className","src","width","height","alt","CardList","robots","map","user","i","card","key","id","username","SearchBox","searchField","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchfield","target","value","_this2","filteredRobots","filter","robot","toLowerCase","includes","length","href","rel","searchbox","Components_scroll","cardlist","Component","ReactDOM","render","app","document","getElementById","URL","process","origin","addEventListener","concat","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b176d013.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\n\nconst Card = ({name, image, email}) => {\n    // const {name, image} = props; //Destructuring (also is/can be done within func parameters)\n\n    return (\n        <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img src={image} \n            width= \"200px\" height=\"200px\" alt=\"California Flag\" />\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p> \n                { // <p>{props.email}</p>  Not using Destructuring\n                // CAN NOT use props unless its defined and added as a func parameter.\n                }\n            </div>\n        </div>\n    );\n}\n\nexport default Card; \n\n\n","import React from \"react\";\n//import {robots} from \"./robots.js\";  <-- CardList doesnt need this import since index.js ..\n//... defined robot and since robots was destructured and added as a parameter here.\n// Otherwise neither would be needed and an import statement would suffice.\nimport Card from \"./card.js\";\n\n\n\nconst CardList = ({robots}) => {\n    // When you loop you need to give it a unique key property. As shown above with 'key={i}'\n    // The key property should hav something that doesnt change. For ex, index (i) could change if array items get moved..\n    // ..So a better key in this case would be something unique like id. 'key=robots[i].id'\n    // This helps react and the dom keep track of whats supposed to appear and whats not or whats changed. \n    // cardComponent iterates/maps through robots and returns each index value.\n    return (\n        <div>\n            {\n                robots.map((user, i) => {\n                    return <Card \n                    key={robots[i].id} \n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email}  \n                    image={robots[i].image} \n                    />\n                })\n            }\n            {// Curley braces tells javascript to evaluate the vairiable.\n            }\n        </div>\n    );\n}\n\nexport default CardList;","export const robots = [\n    {\n        id: 1, \n        name: \"New York\",\n        username: \"New York\",\n        email: \"NewYork@gmail.com\",\n        image: \"https://libertyflagandbanner.com/wp-content/uploads/2015/08/new-york-flag.jpg\",\n    },\n    {\n        id: 2, \n        name: \"California\",\n        username: \"LA\",\n        email: \"California@gmail.com\",\n        image: \"http://www.empirestatenews.net/wp-content/uploads/2017/02/state-flag-of-california-republic-725x483.gif\",\n    },\n    {\n        id: 3, \n        name: \"Georgia\",\n        username: \"Atlanta\",\n        email: \"Georgia@gmail.com\",\n        image: \"https://upload.wikimedia.org/wikipedia/commons/thumb/5/54/Flag_of_Georgia_%28U.S._state%29.svg/1200px-Flag_of_Georgia_%28U.S._state%29.svg.png\",\n    },\n    {\n        id: 4, \n        name: \"Florida\",\n        username: \"Miami\",\n        email: \"Florida@gmail.com\",\n        image: \"http://media3.s-nbcnews.com/j/newscms/2015_26/1087986/150623-florida-state-flag-mn-0900_82300238df2ff4c4775fdefeea911d60.nbcnews-ux-2880-1000.jpg\",\n\n    },\n    {\n        id: 5, \n        name: \"Ohio\",\n        username: \"Columbus\",\n        email: \"Ohio@gmail.com\",\n        image: \"http://cdn.redalertpolitics.com/files/2013/10/Ohio-State-Flag.jpg\",\n    },\n]","import React from \"react\";\n\n\nconst SearchBox = ({searchField, searchChange}) => {\n    return (\n        <div className=\"pa2\">\n            <input \n            className=\"pa3 ba b--green bg-lightest-blue\"\n            type=\"search\" \n            placeholder=\"Search States\"\n            onChange = {searchChange}\n            />\n        </div>\n    )\n}\n\nexport default SearchBox;","import React from \"react\";\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflow: 'Scroll', border: '3px solid black', height:'500px'}}>\n            {props.children}\n        </div>\n    )\n\n};\n\nexport default Scroll;","import React, {Component} from \"react\";\nimport CardList from \"../Components/cardlist\";\nimport {robots} from \"../Components/robots\"; // No import needed when fetching data\nimport SearchBox from \"../Components/searchbox\";\n//import \"./app.css\" \nimport Scroll from \"../Components/scroll.js\"\n\n\n\n\n\nclass App extends Component {\n    constructor() {\n        super()\n        this.state = {\n            robots: robots, // used to be an empty array to accomidate componentDidMount() fetch code.\n            searchfield: ``,\n        }\n    }\n\n    // componentDidMount() {\n    //     fetch('https://jsonplaceholder.typicode.com/users')\n    //     .then(response => response.json())\n    //     .then(users => this.setState({robots: users}));\n    // }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value})\n        \n    }\n    render() {\n        \n        const filteredRobots = this.state.robots.filter(robot => {\n            return robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n        })\n        if (this.state.robots.length === 0) {\n            return <h1>Loading...</h1>\n        } else {\n            return (\n                \n                <div className=\"tc\">\n                    <head>\n                    <link href=\"https://fonts.googleapis.com/css?family=Erica+One|Libre+Baskerville:700\" rel=\"stylesheet\"/>                </head>\n                    <h1 className=\"statesTitle\">The States</h1>\n                    <SearchBox searchChange={this.onSearchChange} />\n                    <Scroll>\n                        <CardList robots={filteredRobots} />\n                    </Scroll> \n                </div>\n            )\n        }\n    }\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n//import Card from \"./card.js\"  <--   This goes in CardList now.\n//import {robots} from \"./robots.js\";  <--  This goes in CardList now. UNLESS CardList module assigns it, as shown/done.\n// CardList was moved to App.js \nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\nimport App from \"./Containers/app.js\";\n\nReactDOM.render(<App/>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}